---
title: "Simulations and calculations of Linezolid PKPD index from LCS concentrations"
author: Michael BURTIN
format: html
editor: source
editor_options: 
  chunk_output_type: console
---

## Settings & Dependencies

Load necessary library and dependencies for the project. You can also specify different parameters as PKPD parameters, number of patients, etc.

```{r}
#| echo: false
#| include: false

####
## Load dependencies
####
library(mrgsolve)       # Simulation package
library(dplyr)          # Data manipulation
library(tidyr)          # Data manipulation
library(purrr)          # Data manipulation
library(tibble)         # Data manipulation
library(ggplot2)        # Plotting

# If doesn't exist, create a folder for plots
if (!dir.exists("results")) {
  dir.create("results")
}

# Load the model
model_file <- mread("model/Linezolid_PKPD_model")

####
## Specify your entries
####

# Multithreading setup (define the max number to use for simulations)
thread_number = 9

# Global PKPD parameters
CL = 8.38
V1 = 36.4
FU = 0.69

# Specific parameters for each strains
model_list <- list(
    # S. Aureus models
    SA07982 = param(model_file, PCL=CL, B0 = 5.98, Bmax = 9.76, Kg = 1.04,
                   Emax = 2.16, EC50 = 1.42, Kon = 0.0, MIC = 1.0) |>
              smat(matrix(0.25)),
    SA29213 = param(model_file, PCL=CL, B0 = 6.02, Bmax = 9.35, Kg = 1.26,
                    Emax = 2.41, EC50 = 2.28, Kon = 0.014, MIC = 4.0) |> 
              smat(matrix(0.38)),
    SA01943 = param(model_file, PCL=CL, B0 = 6.09, Bmax = 9.26, Kg = 1.09,
                    Emax = 1.93, EC50 = 1.1, Kon = 0.016, MIC = 2.0) |>
              smat(matrix(0.35)),
    SA33591 = param(model_file, PCL=CL, B0 = 5.96, Bmax = 9.46, Kg = 1.02,
                    Emax = 1.52, EC50 = 0.68, Kon = 0.0, MIC = 1.0) |>
              smat(matrix(0.37)),
    # S. Epidermidis models
    SE17036 = param(model_file, PCL=CL, B0 = 5.81, Bmax = 9, Kg = 0.97,
                   Emax = 1.65, EC50 = 0.51, Kon = 0.021, MIC = 2.0) |>
              smat(matrix(0.35)),
    SE18436 = param(model_file, PCL=CL, B0 = 6.28, Bmax = 9.13, Kg = 0.86,
                   Emax = 1.11, EC50 = 0.54, Kon = 0.0, MIC = 2.0) |>
              smat(matrix(0.24)),
    SE14990 = param(model_file, PCL=CL, B0 = 5.77, Bmax = 8.98, Kg = 1.07,
                    Emax = 1.54, EC50 = 1.06, Kon = 0.0, MIC = 2.0) |>
              smat(matrix(0.64)),
    # S. Capitis models
    SC14982 = param(model_file, PCL=CL, B0 = 6.05, Bmax = 9.3, Kg = 0.83,
                   Emax = 1.56, EC50 = 1.34, Kon = 0.0, MIC = 2.0) |>
              smat(matrix(0.47)),
    SC19668 = param(model_file, PCL=CL, B0 = 6.38, Bmax = 9.3, Kg = 1.03,
                   Emax = 1.5, EC50 = 0.62, Kon = 0.0, MIC = 2.0) |>
              smat(matrix(0.42))
)

# Specify AMT choosen for fractioned doses
fractioned_daily_AMT <- c(10, 25, 50, 75, 100, 150, 300, 450, 600, 800, 1000, 1200, 1800, 2400, 3000, 4000, 5500, 7000, 8500, 10000)

# Specify the number of simulated patients
i_data <- expand.idata(ID = 1:250)

####
## Execute the main script
####
source("RScripts/main_script.R")

```

## PKPD Plots generation

This block will generate PKPD plots binding Log10 CFU variation at 24h to all possible PKPD indexes values. Five indexes are used in this study: fCmax/MIC, fAUC/MIC, fT\>MIC, fT\>MIC 4X, fT\>MIC 10X.

```{r}
# Load the generic function to generate plots
source("RScripts/pkpd_plots_script.R")

# Generate the plots
csf_plot <- generate_PKPD_plots(obs_data = csf_data[["obs_mean"]], 
                                pred_data = csf_data[["pred_data"]], 
                                title = "LNZ PKPD Index for CSF" ,
                                filename = "LNZ PKPD Indexes for CSF target.png")

plasma_plot <- generate_PKPD_plots(obs_data = plasma_data[["obs_mean"]], 
                                   pred_data = plasma_data[["pred_data"]], 
                                   title = "LNZ PKPD Index for Plasma",
                                   "LNZ PKPD Indexes for Plasma target.png")

mix_plot <- generate_PKPD_plots(obs_data = csf_with_plasma_index_data[["obs_mean"]], 
                                pred_data = csf_with_plasma_index_data[["pred_data"]], 
                                title = "LNZ PKPD Index for CSF with Plasma indexes",
                                filename = "LNZ PKPD Indexes for CSF target with Plasma Indexes.png")

```

## Target estimations for each indexes

Generate a table with different PD targets (bacteriostasis, 1-log kill, 2-log kill) for each PKPD index with index values.

```{r}
# Generic function to find the index value for a specific target. Based on B0 and pred data.
target_index_efficacity <- list(
  
csf_efficacity = csf_data[["correlation_data"]] |>
  select(c(
    PKPD_Index,
    Target_stasis,
    Target_1LogKill,
    Target_2LogKill,
  )) |>
  pivot_longer(-c(PKPD_Index),
               names_to = "EfficacyCriteria",
               values_to = "TargetIndexValue") |>
  mutate(TargetIndexValue =
           map_chr(TargetIndexValue,
                   ~ if(anyNA(.x)) {return(NA)
                   }
                   else
                   {
                     paste0(
                       round(.x[1, 1], 2), " [", round(.x[1, 3], 2), " - ", round(.x[1, 4], 2), "]"
                     )})) |>
  pivot_wider(names_from = PKPD_Index, values_from = TargetIndexValue),

plasma_efficacity = plasma_data[["correlation_data"]] |>
  select(c(
    PKPD_Index,
    Target_stasis,
    Target_1LogKill,
    Target_2LogKill,
  )) |>
  pivot_longer(-c(PKPD_Index),
               names_to = "EfficacyCriteria",
               values_to = "TargetIndexValue") |>
  mutate(TargetIndexValue =
           map_chr(TargetIndexValue,
                   ~ if(anyNA(.x)) {return(NA)
                   }
                   else
                   {
                     paste0(
                       round(.x[1, 1], 2), " [", round(.x[1, 3], 2), " - ", round(.x[1, 4], 2), "]"
                     )})) |>
  pivot_wider(names_from = PKPD_Index, values_from = TargetIndexValue),

mix_efficacity = csf_with_plasma_index_data[["correlation_data"]] |>
  select(c(
    PKPD_Index,
    Target_stasis,
    Target_1LogKill,
    Target_2LogKill,
  )) |>
  pivot_longer(-c(PKPD_Index),
               names_to = "EfficacyCriteria",
               values_to = "TargetIndexValue") |>
  mutate(TargetIndexValue =
           map_chr(TargetIndexValue,
                   ~ if(anyNA(.x)) {return(NA)
                   }
                   else
                   {
                     paste0(
                       round(.x[1, 1], 2), " [", round(.x[1, 3], 2), " - ", round(.x[1, 4], 2), "]"
                     )})) |>
  pivot_wider(names_from = PKPD_Index, values_from = TargetIndexValue)
)

# Resume the percentage of data under a certain log-target
targets_summary <- list(
  
  csf_global = csf_data[["sim_data"]] |>
  ungroup() |>
  summarise(
    Stasis_percentage = sum(deltaLog10CFU > 0)/n() * 100,
    Log1Kill_percentage = sum(deltaLog10CFU < -1)/n() * 100,
    Log2Kill_percentage = sum(deltaLog10CFU < -2)/n() * 100
  ),
  
  csf_by_DoseGroup = csf_data[["sim_data"]] |>
  ungroup() |>
  group_by(DoseGroup) |>
  summarise(
    Stasis_percentage = sum(deltaLog10CFU < 0)/n() * 100,
    Log1Kill_percentage = sum(deltaLog10CFU < -1)/n() * 100,
    Log2Kill_percentage = sum(deltaLog10CFU < -2)/n() * 100,
  ) |> filter(DoseGroup != "control"),
  
  csf_by_AMT = csf_data[["sim_data"]] |>
  ungroup() |>
  group_by(AMT) |>
  summarise(
    Stasis_percentage = sum(deltaLog10CFU < 0)/n() * 100,
    Log1Kill_percentage = sum(deltaLog10CFU < -1)/n() * 100,
    Log2Kill_percentage = sum(deltaLog10CFU < -2)/n() * 100,
  ),
  
  csf_by_AMT_and_DG = csf_data[["sim_data"]] |>
  filter(DoseGroup != "continuous_infusion") |>
  ungroup() |>
  group_by(DoseGroup, AMT) |>
  summarise(
    Stasis_percentage = sum(deltaLog10CFU < 0)/n() * 100,
    Log1Kill_percentage = sum(deltaLog10CFU < -1)/n() * 100,
    Log2Kill_percentage = sum(deltaLog10CFU < -2)/n() * 100,
  ),
  
  plasma_global = plasma_data[["sim_data"]] |>
    ungroup() |>
    summarise(
      Stasis_percentage = sum(deltaLog10CFU < 0)/n() * 100,
      Log1Kill_percentage = sum(deltaLog10CFU < -1)/n() * 100,
      Log2Kill_percentage = sum(deltaLog10CFU < -2)/n() * 100
    ),
  
  plasma_by_DoseGroup = plasma_data[["sim_data"]] |>
  ungroup() |>
  group_by(DoseGroup) |>
  summarise(
    Stasis_percentage = sum(deltaLog10CFU < 0)/n() * 100,
    Log1Kill_percentage = sum(deltaLog10CFU < -1)/n() * 100,
    Log2Kill_percentage = sum(deltaLog10CFU < -2)/n() * 100
  ) |> filter(DoseGroup != "control"),
  
  plasma_by_AMT = plasma_data[["sim_data"]] |>
  ungroup() |>
  group_by(AMT) |>
  summarise(
    Stasis_percentage = sum(deltaLog10CFU < 0)/n() * 100,
    Log1Kill_percentage = sum(deltaLog10CFU < -1)/n() * 100,
    Log2Kill_percentage = sum(deltaLog10CFU < -2)/n() * 100
  ),
  
  plasma_by_AMT_and_DG = plasma_data[["sim_data"]] |>
  filter(DoseGroup != "continuous_infusion") |>
  ungroup() |>
  group_by(DoseGroup, AMT) |>
  summarise(
    Stasis_percentage = sum(deltaLog10CFU < 0)/n() * 100,
    Log1Kill_percentage = sum(deltaLog10CFU < -1)/n() * 100,
    Log2Kill_percentage = sum(deltaLog10CFU < -2)/n() * 100,
  )
)
```

## Intermediate analysis

We can use various analyses to resume our data. In this block, we can find a resume of PKPD data with different stratification. It will also generate a resume of index values for different PD targets.

```{r}
# Resume several differents data in a list
summary_data <- list(
# Resume fractioned data at 24h for each AMT & Dose Group
pk_fractioned_24h = sim_results_fractioned[["fractioned_results"]][[1]] |>
    group_by(DoseGroup, AMT) |>
    summarize( 
      C_CENTRAL_mean = mean(C_CENTRAL),
      C_CENTRAL_by_AUC = mean(AUCCENTRAL[time == 24.0])/24,
      C_CSF_mean = mean(C_CSF),
      C_CSF_by_AUC = mean(AUCCSF[time == 24.0])/24,
      Cmax_CENTRAL_mean = mean(Cmax_CENTRAL[time == 24.0]),
      Cmax_CSF = mean(Cmax_CSF[time == 24.0])
    ),

# Resume fractioned data at 24h for each AMT
pk_fractioned_24h_by_AMT = sim_results_fractioned[["fractioned_results"]][[1]] |>
    group_by(AMT) |>
    summarize( 
      C_CENTRAL_mean = mean(C_CENTRAL),
      C_CENTRAL_by_AUC = mean(AUCCENTRAL[time == 24.0])/24,
      C_CSF_mean = mean(C_CSF),
      C_CSF_by_AUC = mean(AUCCSF[time == 24.0])/24,
      Cmax_CENTRAL_mean = mean(Cmax_CENTRAL[time == 24.0]),
      Cmax_CSF = mean(Cmax_CSF[time == 24.0])
    ),

# Resume all fractioned data over the time for PD & PK
pkpd_fractioned_full = sim_results_fractioned[["fractioned_results"]][[1]] |>
    group_by(DoseGroup, AMT, time) |>
    summarize( 
      Log10CFU_CENTRAL = mean(Log10CFU_CENTRAL),
      Log10CFU_CSF = mean(Log10CFU_CSF),
      C_CENTRAL = mean(C_CENTRAL),
      C_CSF = mean(C_CSF)
    ),

# Resume all fractioned data over the time for PD & PK
pkpd_continuous_full = sim_results_continuous_inf[["continuous_inf_results"]] |>
    group_by(STRN, AMT, time) |>
    summarize( 
      Log10CFU_CENTRAL = mean(Log10CFU_CENTRAL),
      Log10CFU_CSF = mean(Log10CFU_CSF),
      C_CENTRAL = mean(C_CENTRAL),
      C_CSF = mean(C_CSF)
    )
)

```

Another check about the mean & median of PD Endpoints across AMT for each DoseGroup. It allow to visualize the difference observe in targets_summary dataset with plasma_by_AMT_and_DG & csf_by_AMT_and_DG

```{r}
## Plasma
ggplot(plasma_data[["obs_mean"]] %>%
         filter(DoseGroup != "continuous_infusion" & DoseGroup != "control")) +
  stat_summary(mapping = aes(x = AMT, y = deltaLog10CFU, color = factor(DoseGroup, levels = c("fractioned_24h", "fractioned_12h", "fractioned_8h", "fractioned_4h")), group = DoseGroup), 
               fun = "mean", 
               geom = "line", 
               size = 1) +
  scale_color_manual(name = "Obs mean by DoseGroup", values = c("tomato", "cornflowerblue", "springgreen4", "goldenrod1")) +
  ggtitle("PD endpoint across dose amounts and stratify by DoseGroup in Plasma")
  theme_bw()

ggplot(plasma_data[["obs_mean"]] %>%
         filter(DoseGroup != "continuous_infusion" & DoseGroup != "control")) +
  stat_summary(mapping = aes(x = AMT, y = deltaLog10CFU, color = factor(DoseGroup, levels = c("fractioned_24h", "fractioned_12h", "fractioned_8h", "fractioned_4h")), group = DoseGroup), 
               fun = "median", 
               geom = "line", 
               size = 1) +
  scale_color_manual(name = "Obs median by DoseGroup", values = c("tomato", "cornflowerblue", "springgreen4", "goldenrod1")) +
  ggtitle("PD endpoint across dose amounts and stratify by DoseGroup in Plasma")
  theme_bw()
  
## CSF
ggplot(csf_data[["obs_mean"]] %>%
         filter(DoseGroup != "continuous_infusion" & DoseGroup != "control")) +
  stat_summary(mapping = aes(x = AMT, y = deltaLog10CFU, color = factor(DoseGroup, levels = c("fractioned_24h", "fractioned_12h", "fractioned_8h", "fractioned_4h")), group = DoseGroup), 
               fun = "mean", 
               geom = "line", 
               size = 1) +
  scale_color_manual(name = "Obs mean by DoseGroup", values = c("tomato", "cornflowerblue", "springgreen4", "goldenrod1")) +
  ggtitle("PD endpoint across dose amounts and stratify by DoseGroup in CSF")
  theme_bw()
  
ggplot(csf_data[["obs_mean"]] %>%
         filter(DoseGroup != "continuous_infusion" & DoseGroup != "control")) +
  stat_summary(mapping = aes(x = AMT, y = deltaLog10CFU, color = factor(DoseGroup, levels = c("fractioned_24h", "fractioned_12h", "fractioned_8h", "fractioned_4h")), group = DoseGroup), 
               fun.data = "mean_cl_boot",
               geom = "ribbon",
               alpha = 0.2) +
  stat_summary(mapping = aes(x = AMT, y = deltaLog10CFU, color = factor(DoseGroup, levels = c("fractioned_24h", "fractioned_12h", "fractioned_8h", "fractioned_4h")), group = DoseGroup), 
               fun = "mean", 
               geom = "line", 
               size = 1) +
  scale_color_manual(name = "Obs mean by DoseGroup", values = c("tomato", "cornflowerblue", "springgreen4", "goldenrod1")) +
  ggtitle("PD endpoint across dose amounts and stratify by DoseGroup in CSF") +
  theme_bw()

ggplot(csf_data[["obs_mean"]] %>%
         filter(DoseGroup != "continuous_infusion" & DoseGroup != "control")) +
  stat_summary(mapping = aes(x = AMT, y = deltaLog10CFU, color = factor(DoseGroup, levels = c("fractioned_24h", "fractioned_12h", "fractioned_8h", "fractioned_4h")), group = DoseGroup), 
               fun = "median", 
               geom = "line", 
               size = 1) +
  scale_color_manual(name = "Obs median by DoseGroup", values = c("tomato", "cornflowerblue", "springgreen4", "goldenrod1")) +
  ggtitle("PD endpoint across dose amounts and stratify by DoseGroup in CSF")
  theme_bw()
  
```

We will evaluate the percent of errors for different PD targets

```{r}
source("RScripts/target_errors_estimation.R")

```

## VPC generation

Generate all VPC objects needed for plots.

```{r}
source("RScripts/vpc_script.R")

csf_vpc_data <- list(
  obs_data = generate_obs_data(csf_data[["sim_data"]]),
  cmax_sim = generate_pred_data(sim_data = csf_data[["correlation_data"]], 
                                obs_data = generate_obs_data(csf_data[["sim_data"]]),
                                pkpd_index = "I1_Cmax",
                                n_sim = 100),
  auc_sim = generate_pred_data(sim_data = csf_data[["correlation_data"]], 
                                obs_data = generate_obs_data(csf_data[["sim_data"]]),
                                pkpd_index = "I2_AUC",
                                n_sim = 100),
  tmic_sim = generate_pred_data(sim_data = csf_data[["correlation_data"]], 
                                obs_data = generate_obs_data(csf_data[["sim_data"]]),
                                pkpd_index = "I3_ToverMIC",
                                n_sim = 100)
)

csf_vpc_with_plasma_index_data <- list(
  obs_data = generate_obs_data(csf_with_plasma_index_data[["sim_data"]]),
  cmax_sim = generate_pred_data(sim_data = csf_with_plasma_index_data[["correlation_data"]], 
                                obs_data = generate_obs_data(csf_with_plasma_index_data[["sim_data"]]),
                                pkpd_index = "I1_Cmax",
                                n_sim = 100),
  auc_sim = generate_pred_data(sim_data = csf_with_plasma_index_data[["correlation_data"]], 
                                obs_data = generate_obs_data(csf_with_plasma_index_data[["sim_data"]]),
                                pkpd_index = "I2_AUC",
                                n_sim = 100),
  tmic_sim = generate_pred_data(sim_data = csf_with_plasma_index_data[["correlation_data"]], 
                                obs_data = generate_obs_data(csf_with_plasma_index_data[["sim_data"]]),
                                pkpd_index = "I3_ToverMIC",
                                n_sim = 100)
)

gc()
```

Generate the binning data

```{r}
cmax_obs <- csf_vpc_data$obs_data |>
    filter(PKPD_Index == "I1_Cmax") |>
    mutate(bin = ntile(value, 20)) |>
    group_by(bin) |>
    summarize(
      x_mean = mean(value),
      p5 = quantile(deltaLog10CFU, 0.05),
      p50 = quantile(deltaLog10CFU, 0.5),
      p95 = quantile(deltaLog10CFU, 0.95)
    )

cmax_sim <- csf_vpc_data$cmax_sim |>
    group_by(REP) |>
    mutate(bin = ntile(value, 20)) |>
    group_by(REP, bin) |>
    summarize(
      x_mean = mean(value),
      p5 = quantile(IPRED, 0.05),
      p50 = quantile(IPRED, 0.5),
      p95 = quantile(IPRED, 0.95)
    ) |>
    pivot_longer(cols = c(p5, p50, p95), names_to = "percentile", values_to = "value") |>
    group_by(percentile, bin, x_mean) |>
    summarize(
      ic_05 = quantile(value, 0.05),
      ic_50 = quantile(value, 0.5),
      ic_95 = quantile(value, 0.95)
    )

auc_obs <- csf_vpc_data$obs_data |> 
    filter(PKPD_Index == "I2_AUC") |>
    mutate(bin = ntile(value, 20)) |>
    group_by(bin) |>
    summarize(
      x_mean = mean(value),
      p5 = quantile(deltaLog10CFU, 0.05),
      p50 = quantile(deltaLog10CFU, 0.5),
      p95 = quantile(deltaLog10CFU, 0.95)
    )

auc_sim <- csf_vpc_data$auc_sim |>
    group_by(REP) |>
    mutate(bin = ntile(value, 20)) |>
    group_by(REP, bin) |>
    summarize(
      x_mean = mean(value),
      p5 = quantile(IPRED, 0.05),
      p50 = quantile(IPRED, 0.5),
      p95 = quantile(IPRED, 0.95)
    ) |>
    pivot_longer(cols = c(p5, p50, p95), names_to = "percentile", values_to = "value") |>
    group_by(percentile, bin, x_mean) |>
    summarize(
      ic_05 = quantile(value, 0.05),
      ic_50 = quantile(value, 0.5),
      ic_95 = quantile(value, 0.95)
    )

tmic_obs <- csf_vpc_data$obs_data |>
    filter(PKPD_Index == "I3_ToverMIC") |>
    mutate(bin = ntile(value, 20)) |>
    group_by(bin) |>
    summarize(
      x_mean = mean(value),
      p5 = quantile(deltaLog10CFU, 0.05),
      p50 = quantile(deltaLog10CFU, 0.5),
      p95 = quantile(deltaLog10CFU, 0.95)
    )

tmic_sim <- csf_vpc_data$tmic_sim |>
    group_by(REP) |>
    mutate(bin = cut(value, breaks = seq(0, 100, by = 20), right = FALSE)) |>
    group_by(REP, bin) |>
    summarize(
      x_mean = mean(value),
      p5 = quantile(IPRED, 0.05),
      p50 = quantile(IPRED, 0.5),
      p95 = quantile(IPRED, 0.95)
    ) |>
    pivot_longer(cols = c(p5, p50, p95), names_to = "percentile", values_to = "value") |>
    group_by(percentile, bin, x_mean) |>
    summarize(
      ic_05 = quantile(value, 0.05),
      ic_50 = quantile(value, 0.5),
      ic_95 = quantile(value, 0.95)
    )
```

```{r}
library(ggplot2)
library(patchwork)

# Ajouter une légende pour les couleurs dans les géométries
p1 <- ggplot() +
  geom_smooth(data = cmax_obs, aes(x = x_mean, y = p5, linetype = "p5_obs"), 
              method = "loess", color = "black", size = 0.5, se = FALSE, span = 1) +
  geom_smooth(data = cmax_obs, aes(x = x_mean, y = p50, linetype = "p50_obs"), 
              method = "loess", color = "black", size = 0.75, se = FALSE, span = 1) +
  geom_smooth(data = cmax_obs, aes(x = x_mean, y = p95, linetype = "p95_obs"), 
              method = "loess", color = "black", size = 0.5, se = FALSE, span = 1) +
  geom_smooth(data = cmax_sim |> filter(percentile == "p5"), aes(x = x_mean, y = ic_50, color = "p5_sim"), 
              method = "loess", linetype = "solid", size = 0.6, se = TRUE, span = 1) +
  geom_smooth(data = cmax_sim |> filter(percentile == "p50"), aes(x = x_mean, y = ic_50, color = "p50_sim"), 
              method = "loess", linetype = "solid", size = 0.6, se = TRUE, span = 1) +
  geom_smooth(data = cmax_sim |> filter(percentile == "p95"), aes(x = x_mean, y = ic_50, color = "p95_sim"), 
              method = "loess", linetype = "solid", size = 0.6, se = TRUE, span = 1) +
  scale_x_continuous(
    limits = c(0.1, 100),
    breaks = c(0.1, 1, 10, 100),
    trans = "log10"
  ) +
  scale_y_continuous(
    limits = c(-5, 6),
    breaks = c(5, 2.5, 0, -2.5, -5),
  ) +
  scale_linetype_manual(name = "Observed Percentiles",
                        values = c("p5_obs" = "dashed", "p50_obs" = "solid", "p95_obs" = "dashed"),
                        labels = c("p5_obs" = "5%", "p50_obs" = "50%", "p95_obs" = "95%")) +
  scale_color_manual(name = "Simulated Percentiles",
                     values = c("p5_sim" = "blue", "p50_sim" = "red", "p95_sim" = "blue"),
                     labels = c("p5_sim" = "5%", "p50_sim" = "50%", "p95_sim" = "95%")) +
  guides(
    color = guide_legend(order = 2, ncol = 3),
    linetype = guide_legend(order = 1, ncol = 3)
  ) +
  labs(x = "fCmax/MIC", y = "DeltaLog10CFU (CFU/ml)") +
  theme_minimal()

# Ajouter une légende pour les couleurs dans les géométries
p2 <- ggplot() +
  geom_smooth(data = auc_obs, aes(x = x_mean, y = p5, linetype = "p5_obs"), 
              method = "loess", color = "black", size = 0.5, se = FALSE, span = 1) +
  geom_smooth(data = auc_obs, aes(x = x_mean, y = p50, linetype = "p50_obs"), 
              method = "loess", color = "black", size = 0.75, se = FALSE, span = 1) +
  geom_smooth(data = auc_obs, aes(x = x_mean, y = p95, linetype = "p95_obs"), 
              method = "loess", color = "black", size = 0.5, se = FALSE, span = 1) +
  geom_smooth(data = auc_sim |> filter(percentile == "p5"), aes(x = x_mean, y = ic_50, color = "p5_sim"), 
              method = "loess", linetype = "solid", size = 0.6, se = TRUE, span = 1) +
  geom_smooth(data = auc_sim |> filter(percentile == "p50"), aes(x = x_mean, y = ic_50, color = "p50_sim"), 
              method = "loess", linetype = "solid", size = 0.6, se = TRUE, span = 1) +
  geom_smooth(data = auc_sim |> filter(percentile == "p95"), aes(x = x_mean, y = ic_50, color = "p95_sim"), 
              method = "loess", linetype = "solid", size = 0.6, se = TRUE, span = 1) +
  scale_x_continuous(
    limits = c(1, 1000),
    breaks = c(1, 10, 100, 1000),
    trans = "log10"
  ) +
  scale_y_continuous(
    limits = c(-5, 6),
    breaks = c(5, 2.5, 0, -2.5, -5),
  ) +
  scale_linetype_manual(name = "Observed Percentiles",
                        values = c("p5_obs" = "dashed", "p50_obs" = "solid", "p95_obs" = "dashed"),
                        labels = c("p5_obs" = "5%", "p50_obs" = "50%", "p95_obs" = "95%")) +
  scale_color_manual(name = "Simulated Percentiles",
                     values = c("p5_sim" = "blue", "p50_sim" = "red", "p95_sim" = "blue"),
                     labels = c("p5_sim" = "5%", "p50_sim" = "50%", "p95_sim" = "95%")) +
  guides(
    color = guide_legend(order = 2, ncol = 3),
    linetype = guide_legend(order = 1, ncol = 3)
  ) +
  labs(x = "fAUC/MIC", y = NULL) +
  theme_minimal()

# Ajouter une légende pour les couleurs dans les géométries
p3 <- ggplot() +
  geom_smooth(data = tmic_obs, aes(x = x_mean, y = p5, linetype = "p5_obs"), 
              method = "loess", color = "black", size = 0.5, se = FALSE, span = 1) +
  geom_smooth(data = tmic_obs, aes(x = x_mean, y = p50, linetype = "p50_obs"), 
              method = "loess", color = "black", size = 0.75, se = FALSE, span = 1) +
  geom_smooth(data = tmic_obs, aes(x = x_mean, y = p95, linetype = "p95_obs"), 
              method = "loess", color = "black", size = 0.5, se = FALSE, span = 1) +
  geom_smooth(data = tmic_sim |> filter(percentile == "p5"), aes(x = x_mean, y = ic_50, color = "p5_sim"), 
              method = "loess", linetype = "solid", size = 0.6, se = TRUE, span = 1) +
  geom_smooth(data = tmic_sim |> filter(percentile == "p50"), aes(x = x_mean, y = ic_50, color = "p50_sim"), 
              method = "loess", linetype = "solid", size = 0.6, se = TRUE, span = 1) +
  geom_smooth(data = tmic_sim |> filter(percentile == "p95"), aes(x = x_mean, y = ic_50, color = "p95_sim"), 
              method = "loess", linetype = "solid", size = 0.6, se = TRUE, span = 1) +
  scale_x_continuous(
    limits = c(0, 100),
    breaks = c(0, 25, 50, 75, 100)
  ) +
  scale_y_continuous(
    limits = c(-5, 6),
    breaks = c(5, 2.5, 0, -2.5, -5),
  ) +
  scale_linetype_manual(name = "Observed Percentiles",
                        values = c("p5_obs" = "dashed", "p50_obs" = "solid", "p95_obs" = "dashed"),
                        labels = c("p5_obs" = "5%", "p50_obs" = "50%", "p95_obs" = "95%")) +
  scale_color_manual(name = "Simulated Percentiles",
                     values = c("p5_sim" = "blue", "p50_sim" = "red", "p95_sim" = "blue"),
                     labels = c("p5_sim" = "5%", "p50_sim" = "50%", "p95_sim" = "95%")) +
  guides(
    color = guide_legend(order = 2, ncol = 3),
    linetype = guide_legend(order = 1, ncol = 3)
  ) +
  labs(x = "T>MIC (%)", y = NULL) +
  theme_minimal()

# Merge the 3 VPCs and collect the legend at the top
p1 + p2 + p3 + 
  plot_layout(ncol = 3, guides = "collect") + 
  plot_annotation(theme = theme(legend.position = "top")) + 
  ggsave(file.path(getwd(), "results", "VPC.png"), width = 15, height = 4)

```

## Stratification plots

```{r}
ggplot(filter(csf_data[["obs_mean"]], PKPD_Index == "I2_AUC"))  +
      geom_point(mapping = aes(
        x = value,
        y = deltaLog10CFU,
        color = as.factor(DoseGroup)
      )) +
    scale_x_continuous(
      limits = c(1, 1000),
      breaks = c(1, 10, 100, 1000), 
      trans="log10"
    ) +
    geom_line(filter(csf_data[["pred_data"]], PKPD_Index == "I2_AUC"), 
              mapping = aes(x=value, y=pred), linewidth = 0.8) +
    geom_text(aes(x = Inf, y = Inf, label = paste("R² = ", round(Adj.Rsq, 2))), 
              hjust = 1.2, vjust = 2, size = 4, fontface = "italic", color = "black") +
  theme_bw()

ggplot(filter(csf_data[["obs_mean"]], PKPD_Index == "I2_AUC"))  +
      geom_point(mapping = aes(
        x = value,
        y = deltaLog10CFU,
        color = as.factor(AMT)
      )) +
    scale_x_continuous(
      limits = c(1, 1000),
      breaks = c(1, 10, 100, 1000), 
      trans="log10"
    ) +
    geom_line(filter(csf_data[["pred_data"]], PKPD_Index == "I2_AUC"), 
              mapping = aes(x=value, y=pred), linewidth = 0.8) +
    geom_text(aes(x = Inf, y = Inf, label = paste("R² = ", round(Adj.Rsq, 2))), 
              hjust = 1.2, vjust = 2, size = 4, fontface = "italic", color = "black") +
  theme_bw()


ggplot(filter(csf_data[["obs_mean"]], PKPD_Index == "I3_ToverMIC"))  +
      geom_point(mapping = aes(
        x = value,
        y = deltaLog10CFU,
        color = as.factor(DoseGroup)
      )) +
    geom_line(filter(csf_data[["pred_data"]], PKPD_Index == "I3_ToverMIC"), 
              mapping = aes(x=value, y=pred), linewidth = 0.8) +
    geom_text(aes(x = Inf, y = Inf, label = paste("R² = ", round(Adj.Rsq, 2))), 
              hjust = 1.2, vjust = 2, size = 4, fontface = "italic", color = "black") +
  theme_bw()

ggplot(filter(csf_data[["obs_mean"]], PKPD_Index == "I3_ToverMIC"))  +
      geom_point(mapping = aes(
        x = value,
        y = deltaLog10CFU,
        color = as.factor(AMT)
      )) +
    geom_line(filter(csf_data[["pred_data"]], PKPD_Index == "I3_ToverMIC"), 
              mapping = aes(x=value, y=pred), linewidth = 0.8) +
    geom_text(aes(x = Inf, y = Inf, label = paste("R² = ", round(Adj.Rsq, 2))), 
              hjust = 1.2, vjust = 2, size = 4, fontface = "italic", color = "black") +
  theme_bw()

ggplot(filter(csf_data[["obs_mean"]], PKPD_Index == "I4_ToverMIC_4X"))  +
      geom_point(mapping = aes(
        x = value,
        y = deltaLog10CFU,
        color = as.factor(DoseGroup)
      )) +
    geom_line(filter(csf_data[["pred_data"]], PKPD_Index == "I4_ToverMIC_4X"), 
              mapping = aes(x=value, y=pred), linewidth = 0.8) +
    geom_text(aes(x = Inf, y = Inf, label = paste("R² = ", round(Adj.Rsq, 2))), 
              hjust = 1.2, vjust = 2, size = 4, fontface = "italic", color = "black") +
  theme_bw()

ggplot(filter(csf_data[["obs_mean"]], PKPD_Index == "I4_ToverMIC_4X"))  +
      geom_point(mapping = aes(
        x = value,
        y = deltaLog10CFU,
        color = as.factor(AMT)
      )) +
    geom_line(filter(csf_data[["pred_data"]], PKPD_Index == "I4_ToverMIC_4X"), 
              mapping = aes(x=value, y=pred), linewidth = 0.8) +
    geom_text(aes(x = Inf, y = Inf, label = paste("R² = ", round(Adj.Rsq, 2))), 
              hjust = 1.2, vjust = 2, size = 4, fontface = "italic", color = "black") +
  theme_bw()

ggplot(filter(csf_data[["obs_mean"]], PKPD_Index == "I5_ToverMIC_10X"))  +
      geom_point(mapping = aes(
        x = value,
        y = deltaLog10CFU,
        color = as.factor(DoseGroup)
      )) +
    geom_line(filter(csf_data[["pred_data"]], PKPD_Index == "I5_ToverMIC_10X"), 
              mapping = aes(x=value, y=pred), linewidth = 0.8) +
    geom_text(aes(x = Inf, y = Inf, label = paste("R² = ", round(Adj.Rsq, 2))), 
              hjust = 1.2, vjust = 2, size = 4, fontface = "italic", color = "black") +
  theme_bw()

ggplot(filter(csf_data[["obs_mean"]], PKPD_Index == "I5_ToverMIC_10X", AMT >= 1200))  +
      geom_point(mapping = aes(
        x = value,
        y = deltaLog10CFU,
        color = as.factor(AMT)
      )) +
    geom_line(filter(csf_data[["pred_data"]], PKPD_Index == "I5_ToverMIC_10X"), 
              mapping = aes(x=value, y=pred), linewidth = 0.8) +
    geom_text(aes(x = Inf, y = Inf, label = paste("R² = ", round(Adj.Rsq, 2))), 
              hjust = 1.2, vjust = 2, size = 4, fontface = "italic", color = "black") +
  theme_bw()
```

## PK Plots

```{r}
# Plasma plot of LNZ conc across time by AMT with Continuous infusions
summary_data[["continuous_full"]] |>
  filter(STRN == "A07982") |>
  ggplot(aes(x = time, y = C_CENTRAL)) +
  geom_line() +
  labs(
    x = "Time (h)", 
    y = "Linezolid concentrations (mg/L)", 
    title = "Plasmatic PK of Linezolid for each dosing regimens",
    color = "Dose amount (mg)"
  ) +
  scale_x_continuous(breaks = seq(0, 24, 4))

ggsave("results/plasma_pk_continuous_infusions_by_AMT.png", width = 8.27, height = 11.69, units = "in", dpi = 300)

# Plasma plot of LNZ conc across time by AMT
summary_data[["fractioned_full"]] |>
  filter(AMT != 0) |>
  ggplot(aes(x = time, y = C_CENTRAL, color = as.factor(AMT))) +
  geom_line() +
  facet_wrap(~DoseGroup) +
  labs(
    x = "Time (h)", 
    y = "Linezolid concentrations (mg/L)", 
    title = "Plasmatic PK of Linezolid for each dosing regimens",
    color = "Dose amount (mg)"
  ) +
  scale_x_continuous(breaks = seq(0, 24, 4))

ggsave("results/plasma_pk_by_AMT.png", width = 8.27, height = 11.69, units = "in", dpi = 300)

# Plasma plot of LNZ conc across time by DoseGroup
summary_data[["fractioned_full"]] |>
  ggplot(aes(x = time, y = C_CENTRAL, color = as.factor(DoseGroup))) +
  geom_line() +
  facet_wrap(~AMT, ncol = 3) +
  labs(
    x = "Time (h)", 
    y = "Linezolid concentrations (mg/L)", 
    title = "Plasmatic PK of Linezolid for each dose amount",
    color = "Dose regimens"
  ) +
  scale_x_continuous(breaks = seq(0, 24, 4))

ggsave("results/plasma_pk_by_DoseGroup.png", width = 8.27, height = 11.69, units = "in", dpi = 300)

# Plasma plot of LNZ conc across time by DoseGroup with free y-scaling
summary_data[["fractioned_full"]] |>
  filter(AMT != 0) |>
  ggplot(aes(x = time, y = C_CENTRAL, color = as.factor(DoseGroup))) +
  geom_line() +
  facet_wrap(~AMT, ncol = 3, scales = "free_y") +
  labs(
    x = "Time (h)", 
    y = "Linezolid concentrations (mg/L)", 
    title = "Plasmatic PK of Linezolid for each dose amount",
    color = "Dose regimens"
  ) +
  scale_x_continuous(breaks = seq(0, 24, 4))

# Save plot with size A4
ggsave("results/plasma_pk_by_DoseGroup_free_y.png", width = 8.27, height = 11.69, units = "in", dpi = 300)

# Plasma plot of LNZ conc across time by AMT
summary_data[["fractioned_full"]] |>
  ggplot(aes(x = time, y = C_CSF, color = as.factor(AMT))) +
  geom_line() +
  facet_wrap(~DoseGroup) +
  labs(
    x = "Time (h)", 
    y = "Linezolid concentrations (mg/L)", 
    title = "CSF PK of Linezolid for each dosing regimens",
    color = "Dose amount (mg)"
  ) +
  scale_x_continuous(breaks = seq(0, 24, 4))

ggsave("results/csf_pk_by_AMT.png", width = 8.27, height = 11.69, units = "in", dpi = 300)

# Plasma plot of LNZ conc across time by DoseGroup
summary_data[["fractioned_full"]] |>
  filter(AMT != 0) |>
  ggplot(aes(x = time, y = C_CSF, color = as.factor(DoseGroup))) +
  geom_line() +
  facet_wrap(~AMT, ncol = 3) +
  labs(
    x = "Time (h)", 
    y = "Linezolid concentrations (mg/L)", 
    title = "CSF PK of Linezolid for each dose amount",
    color = "Dose regimens"
  ) +
  scale_x_continuous(breaks = seq(0, 24, 4))

ggsave("results/csf_pk_by_DoseGroup.png", width = 8.27, height = 11.69, units = "in", dpi = 300)

# Plasma plot of LNZ conc across time by DoseGroup with free y-scaling
summary_data[["fractioned_full"]] |>
  filter(AMT != 0) |>
  ggplot(aes(x = time, y = C_CSF, color = as.factor(DoseGroup))) +
  geom_line() +
  facet_wrap(~AMT, ncol = 3, scales = "free_y") +  # Échelle 'y' libre pour chaque facette
  labs(
    x = "Time (h)", 
    y = "Linezolid concentrations (mg/L)", 
    title = "CSF PK of Linezolid for each dose amount",
    color = "Dose regimens"
  ) +
  scale_x_continuous(breaks = seq(0, 24, 4))

ggsave("results/csf_pk_by_DoseGroup_free_y.png", width = 8.27, height = 11.69, units = "in", dpi = 300)

```

## PD Plots

```{r}
summary_full |>
  ggplot(aes(x = time, y = Log10CFU_CENTRAL, color = as.factor(DoseGroup))) +
  geom_line() +
  facet_wrap(~AMT, ncol = 3) +  # Échelle 'y' libre pour chaque facette
  labs(
    x = "Time (h)", 
    y = "Number of bacteria in (log10, CFU/ml) (mg/L)", 
    title = "Plasmatic PD of A0798 for each dose amount of Linezolid",
    color = "Dose regimens"
  ) +
  scale_x_continuous(breaks = seq(0, 24, 4))

ggsave("results/plasma_pd_by_AMT.png", width = 8.27, height = 11.69, units = "in", dpi = 300)

summary_full |>
  ggplot(aes(x = time, y = Log10CFU_CENTRAL, color = as.factor(AMT))) +
  geom_line() +
  facet_wrap(~DoseGroup) +
  labs(
    x = "Time (h)", 
    y = "Linezolid concentrations (mg/L)", 
    title = "Plasmatic PD of A07982 for each dosing regimens of Linezolid",
    color = "Dose amount (mg)"
  ) +
  scale_x_continuous(breaks = seq(0, 24, 4))

ggsave("results/plasma_pd_by_DoseGroup.png", width = 8.27, height = 11.69, units = "in", dpi = 300)

summary_full |>
  ggplot(aes(x = time, y = Log10CFU_CSF, color = as.factor(DoseGroup))) +
  geom_line() +
  facet_wrap(~AMT, ncol = 3) +  # Échelle 'y' libre pour chaque facette
  labs(
    x = "Time (h)", 
    y = "Number of bacteria in (log10, CFU/ml) (mg/L)", 
    title = "CSF PD of A0798 for each dose amount of Linezolid",
    color = "Dose regimens"
  ) +
  scale_x_continuous(breaks = seq(0, 24, 4))

ggsave("results/csf_pd_by_AMT.png", width = 8.27, height = 11.69, units = "in", dpi = 300)

summary_full |>
  ggplot(aes(x = time, y = Log10CFU_CSF, color = as.factor(AMT))) +
  geom_line() +
  facet_wrap(~DoseGroup) +
  labs(
    x = "Time (h)", 
    y = "Linezolid concentrations (mg/L)", 
    title = "CSF PD of A0798 for each dosing regimens of Linezolid",
    color = "Dose amount (mg)"
  ) +
  scale_x_continuous(breaks = seq(0, 24, 4))

ggsave("results/csf_pd_by_DoseGroup.png", width = 8.27, height = 11.69, units = "in", dpi = 300)

```
